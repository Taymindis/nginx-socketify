    ## For redis
    geo $dlr {
        default "$";
    }
   
    upstream redis_server {
        server 127.0.0.1:6379;
        server 127.0.0.1:6380 backup;
    }
    upstream rabbitmqup {
        keepalive 100;
        server 127.0.0.1:61618;
    }

    socketify_cache_path /var/cache/sockcache levels=1:2 keys_zone=scache:10m inactive=1m max_size=64m;
    socketify_cache_key $scheme$request_method$host$request_uri;
    socketify_cache_lock on;
    socketify_cache_use_stale error timeout invalid_header updating http_500;
    socketify_cache_valid 3m;
    socketify_ignore_headers Cache-Control Expires Set-Cookie;

    server {
        #[[ FOR BIG CHUNK OF BUFFER CONFIG ]]
        client_max_body_size 200M;
        client_body_buffer_size    4096k;
        client_body_temp_path      /etc/nginx/client_body_temp;
        socketify_buffer_size 4096k;
        socketify_buffers   8 4096k;

        proxy_buffer_size 4096k;
        proxy_buffers   8 4096k;
        proxy_busy_buffers_size   4096k;
        #[[END CONFIG]]

        socketify_ascii_to_char 0 nullstring;
        socketify_ascii_to_char 10 newline;
        socketify_ascii_to_char 34 doublequote;
        
        vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name;
        

        listen       7777;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # gzip off;
        # gzip_vary off;
        # gzip_min_length 10240;
        # gzip_proxied expired no-cache no-store private auth;
        # gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
        # gzip_disable "MSIE [1-6]\.";

        location / {
            root   html;
            index  index.html index.htm;
        }
        
        # error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # error_page   500 502 503 504  /50x.html;
        error_page 404 500 502 503 504 = @fallback;

        location = /50x.html {
            root   html;
        }

        location /get {
            set            $memcached_key $arg_key;
            memcached_pass 127.0.0.1:11211;
            error_page     404 502 504 = @fallback;
        }

        location  = /mmc {
            set $lastdelimeter "@:|:@";

            if ( $request_method !~ ^(GET|PUT|POST)$ ) {
                return 405;
            }

            if ($arg_key = ''){
                return 405 'key needed';
            }
            if ( $request_method ~ ^(GET)$ ) {
                socketify_send "get $arg_key\r\n";
                socketify_done_recv_if_eol_match "@:|:@END\r\n";
                socketify_done_recv_if_start_match "END\r\n";
                socketify_substr_resp "\r\n" "@:|:@\r\nEND" 2 0 200;
            }

            socketify_strlen $request_body$lastdelimeter totalbulklength;

            if ( $request_method ~ ^(PUT|POST)$ ) {
                socketify_send "set $arg_key 0 60000 $totalbulklength\r\n$request_body$lastdelimeter\r\n";
                socketify_done_recv_if_eol_match "STORED\r\n";
            }

            # add_header X-Cache $upstream_cache_status;
            # socketify_cache scache;

            socketify_pass 127.0.0.1:11211;
            error_page     404 502 504 = @fallback;
        }
        # location /getInfo {
        #     if ( $request_method !~ ^(GET)$ ) {
        #         return 405;
        #     }            
        #     #socketify_escape_type uri_component;
        #     socketify_send "*$arg_row\r\n$arg_len\r\nINFO\r\n";
        #     socketify_done_recv_if_eol_match "\r\n\r\n";

        #     # socketify_regex_filter "VALUE.*?[\n\w\W]+?(\{[\n\w\W]+?\}\s)\s*?[\n]+?END";
        #     # add_header content-type "";
        #     add_header content-type "text/plain";
        #     # socketify_substr_resp "{" "}\r\nEND" -1 3;
        #     socketify_pass 127.0.0.1:6379;
        # }  


        location @fallback {
            add_header content-type "application/json";
            return 200 "{\"rs\":\"no found\"}";
        }

        location = /redis {
            set $lastdelimeter "@:|:@";

            if ( $request_method !~ ^(GET|PUT|POST)$ ) {
                return 405;
            }

            if ($arg_key = ''){
                return 405 'key needed';
            }

            # if ($arg_keylen = ''){
            #     return 405 'key len needed';
            # }

            ## Remove it at the moment
            #if ($arg_time = ''){
            #    set $arg_time 600; #Default ten minutes
           # }
            set $arg_time 600; #Default ten minutes

            if ( $request_method ~ ^(GET)$ ) {
                 # set $jsontype 1;
                 socketify_send "GET $arg_key\r\n";
                 # [[ If prefix lenght not include in the buffer recv len, then should use incl_scanned command ]]
                 # socketify_done_recv_by_scan_len scan_aft=$;
                 socketify_done_recv_if_eol_match "@:|:@\r\n";
                 socketify_done_recv_if_eol_match "$-1\r\n";
                 # socketify_unescape_response json_string;
                 # socketify_regex_resp "\$\d+?\r\n([\n\w\W]+?)@\:\|\:@\r\n$" 200;
                 socketify_substr_resp "\r\n" "@:|:@\r\n" 2 0 200;
                 socketify_substr_resp "$-1" "\n" 0 0 404;
                 # add_header content-type "application/json";
                 socketify_content_type "application/json";
            }

            # if ($arg_json = '') {            
            #    set $jsontype 0;
            # }
                        
            # if ($content_length ~ "^\d+"){
            #    return 405;
            # }

           
            if ( $request_method ~ ^(PUT|POST)$ ) {
                # socketify_escape $request_body json_string escbody;
                socketify_strlen $arg_key keylen;
                socketify_strlen $arg_time arg_timelen;
                socketify_strlen $request_body$lastdelimeter totalbulklength;
                # socketify_send "SET $arg_key \"${escbody}@|::|@\" EX $arg_time\r\n";

                # [[ PIPE LINE REDIS Big Bulk String]]
                # socketify_send "*3\r\n${dlr}3\r\nSET\r\n${dlr}$keylen\r\n$arg_key\r\n${dlr}$totalbulklength\r\n${request_body}\r\nAPPEND $arg_key \"$lastdelimeter\"\r\n";
                socketify_send "*5\r\n";
                socketify_send "${dlr}3\r\nSET\r\n";
                socketify_send "${dlr}$keylen\r\n$arg_key\r\n";
                socketify_send "${dlr}$totalbulklength\r\n${request_body}${lastdelimeter}\r\n";
                socketify_send "${dlr}2\r\nEX\r\n";
                socketify_send "${dlr}$arg_timelen\r\n${arg_time}\r\n";
                # socketify_send "${dlr}2\r\nNX\r\n";

                # socketify_done_recv_if_eol_match "\r\n";
                socketify_substr_resp "+" "\r\n" 0 0 202;
                # socketify_resp_success_status 202;
            }
            # socketify_regex_filter "VALUE.*?[\n\w\W]+?(\{[\n\w\W]+?\}\s)\s*?[\n]+?END";
            # add_header content-type "";
            # if ($jsontype = 0) {
            #     add_header content-type "text/plain";     
            # }
            # if ($jsontype = 1) {
            #     add_header content-type "application/json";  
            # }

            # if ($isGetJsonMethod = '1') {
            #   add_header content-type "application/json";
            # }       
            # socketify_substr_resp "{" "}\r\nEND" -1 3;
            # socketify_next_upstream error timeout;
            # socketify_next_upstream_timeout 2000;
            # socketify_pass redis_server;

            add_header X-Cache $upstream_cache_status;
            socketify_cache scache;
            # socketify_buffering on;
            socketify_pass 127.0.0.1:6379;
              # proxy_http_version 1.1;

          # Remove the Connection header if the client sends it,
          # it could be "close" to close a keepalive connection
          # proxy_set_header Connection "";
        }

        location /google_call {
            # internal;
            set $args ""; # remove args
            proxy_pass https://maps.googleapis.com/maps/api/directions/json?mode=driving&key=AIzaSyDR1l31WblRTjttxFLWO36wbj0z_OiK2so&departure_time=now&origin=1.3053688000000001,103.8313138&destination=1.3061121,103.8293333;
            # socketify_proxy_resp_filter;
        }


        location = /livetraffic {
            socketify_read_timeout 60000ms;
            # socketify_send_timeout 1500ms;
            # socketify_connect_timeout 1500ms;

            socketify_send "GET /google_call HTTP/1.0\r\n";
            socketify_send "Host: 127.0.0.1:7777\r\n";
            socketify_send "Connection: close\r\n";
            socketify_send "Cache-Control: no-cache\r\n\r\n";
            # socketify_append_resp "{ \"routeinfo\":"  ;
            socketify_regex_resp ".*?legs\s*?\"\s*?:.*?[\r\n\w\W]+?\[(.*?[\r\n\w\W]+?),[^\"]+?\"steps\"" append;
            socketify_append_resp " }" 200;

            # socketify_substr_resp "{" "}";

            socketify_content_type "application/json";
            socketify_pass 127.0.0.1:7777;
            # socketify_socket_schema "http://";
        }


        location = /stomp {

            if ( $request_method ~ ^(PUT|POST)$ ) {         
                socketify_send "CONNECT\n";
                socketify_send "accept-version:1.1,1.2\n";
                socketify_send "login:guest\n";
                socketify_send "passcode:guest\n\n";
                socketify_send "ascii=0|10";

                socketify_send "SEND\ndestination:/amq/queue/stompqueue\npersistent:false\ncontent-type:text/plain\n\n${request_body}\n\n$nullstring\n";
                # socketify_done_recv_if_eol_match "\n$nullstring";
               
                socketify_done_recv_if_eol_match "ascii=0|10";


                socketify_substr_resp "CONNECTED" "ascii=0|10" 0 0 202;
                socketify_substr_resp "ERROR\n" "first" 0 5 401;

                post_action @disconnect; 

                # error_page 401 = @relogin_and_send;
            }            


            if ( $request_method ~ ^(GET)$ ) {         
                
                socketify_send "CONNECT\n";
                socketify_send "accept-version:1.1,1.2\n";
                socketify_send "login:guest\n";
                socketify_send "passcode:guest\n\n";
                socketify_send "$nullstring\n";

                socketify_send "SUBSCRIBE\n";
                socketify_send "id:0\n";
                socketify_send "destination:/amq/queue/stompqueue\n";
                socketify_send "ack:client-individual\n\n";
                # socketify_send "ack:auto\n\n";
                socketify_send "$nullstring\n";
                # socketify_done_recv_if_ascii_eol_eq "0|10";
                socketify_done_recv_by_scan_len scan_aft=content-length:;

                socketify_substr_resp_to_hdr "message-id:" "\n" 11 0 header_in=abcd;
                socketify_regex_resp_to_hdr "[\n\w\W]+?message-id:(.*?)\n" header_in=messageid;

                # socketify_substr_rt_ascii_resp "content-length:" "0|10" 0 0 200;

                # socketify_regex_resp "(MESSAGE.*?[\r\n\w\W]+)";

                # socketify_npacket_should_recv 2;
                # error_page 301 404 = @disconnect;

                post_action /ack_and_unsub; 

            }

            socketify_pass rabbitmqup;
        }


        # location = /stompConsume {

            # socketify_done_recv_if_eol_match "\n";
            # socketify_pass rabbitmqup;
            # socketify_pass rabbitmqup;


            # proxy_http_version 1.1;
            # proxy_set_header Connection "";
        # }

        # location @relogin_and_send {
        #     socketify_send "CONNECT\n";
        #     socketify_send "accept-version:1.1,1.2\n";
        #     socketify_send "login:guest\n";
        #     socketify_send "passcode:guest\n\n";
        #     socketify_send_ascii "0|10";
        #     socketify_send "SEND\ndestination:/amq/queue/stompqueue\npersistent:false\ncontent-type:text/plain\n\nASLKDJASDAJS\n\n$nullstring\n";
        #     socketify_done_recv_if_ascii_eol_eq "0|10";
            
           
                   
        #     socketify_pass rabbitmqup;    
        # }


        # location @relogin_and_consume {
        #     socketify_send "CONNECT\n";
        #     socketify_send "accept-version:1.1,1.2\n";
        #     socketify_send "login:guest\n";
        #     socketify_send "passcode:guest\n\n";
        #     # socketify_send "$nullstring\n";
        #     socketify_send_ascii "0|10";

        #     socketify_send "SUBSCRIBE\n";
        #     socketify_send "id:0\n";
        #     socketify_send "destination:/amq/queue/stompqueue\n";
        #     socketify_send "ack:auto\n\n";
        #     socketify_send "$nullstring\n";
        #     socketify_send "DISCONNECT\n\n";
        #     socketify_send "$nullstring\n";

        #     socketify_done_recv_if_ascii_eol_eq "0|10";


        #     socketify_regex_resp "^MESSAGE.*?([\r\n\w\W]+)" 200;


        #     socketify_npacket_should_recv 2;

        #     socketify_pass rabbitmqup;
        # }


        location @disconnect {
                socketify_send "DISCONNECT\n";
                socketify_send "receipt:77\n\n";
                socketify_send "$nullstring\n";
                socketify_pass rabbitmqup;
        }


        location /ack_and_unsub {

                socketify_send "ACK\n";
                socketify_send "message-id:$http_messageid\n";
                # socketify_send "transaction:$http_abcd\n";
                socketify_send "id:$http_abcd\n\n";
                socketify_send "$nullstring\n";                
                socketify_send "UNSUBSCRIBE\n";
                socketify_send "id:0\n\n";
                socketify_send "$nullstring\n";
                socketify_send "DISCONNECT\n";
                socketify_send "receipt:77\n\n";
                socketify_send "$nullstring\n";
                socketify_pass rabbitmqup;
        }



    }

